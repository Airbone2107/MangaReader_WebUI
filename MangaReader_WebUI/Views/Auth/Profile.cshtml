@model MangaReader.WebUI.Models.ViewModels.Auth.ProfileViewModel
@{
    ViewData["Title"] = "Trang cá nhân";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    @if (!string.IsNullOrEmpty(Model.User.PhotoURL))
                    {
                        <img src="@Model.User.PhotoURL" alt="Ảnh đại diện" class="rounded-circle img-fluid mb-3" style="max-width: 150px;" />
                    }
                    else
                    {
                        <div class="bg-light rounded-circle d-inline-flex justify-content-center align-items-center mb-3" style="width: 150px; height: 150px;">
                            <i class="bi bi-person-fill" style="font-size: 4rem;"></i>
                        </div>
                    }
                    <h5 class="mb-1">@Model.User.DisplayName</h5>
                    <p class="text-muted">@Model.User.Email</p>
                    <a href="@Url.Action("Logout", "Auth")" class="btn btn-outline-danger mt-3">
                        <i class="bi bi-box-arrow-right me-1"></i> Đăng xuất
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast thông báo -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="bi bi-info-circle me-2"></i>
            <strong class="me-auto" id="toastTitle">Thông báo</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage">
            
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let toastElement = document.getElementById('notificationToast');
        let toast = toastElement ? new bootstrap.Toast(toastElement, { delay: 3000 }) : null;
        
        function showNotification(title, message, type = 'info') {
            const toastTitle = document.getElementById('toastTitle');
            const toastMessage = document.getElementById('toastMessage');
            const toastHeader = document.querySelector('#notificationToast .toast-header');
            
            if (!toast || !toastTitle || !toastMessage || !toastHeader) {
                 console.warn("Không tìm thấy các phần tử toast, sử dụng alert thay thế.");
                 alert(`${title}: ${message}`);
                 return;
            }
            
            toastTitle.textContent = title;
            toastMessage.textContent = message;
            
            toastHeader.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'bg-info', 'text-white');
            if (type === 'success') {
                toastHeader.classList.add('bg-success', 'text-white');
            } else if (type === 'error') {
                toastHeader.classList.add('bg-danger', 'text-white');
            } else if (type === 'warning') {
                toastHeader.classList.add('bg-warning');
            } else {
                toastHeader.classList.add('bg-info', 'text-white');
            }
            
            toast.show();
        }
    </script>
} 