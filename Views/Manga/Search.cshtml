@model manga_reader_web.Models.MangaListViewModel
@{
    ViewData["Title"] = "Tìm kiếm manga";
}

<div class="container py-4">
    <div class="row mb-4">
        <div class="col-md-12">
            <h1 class="mb-4"><i class="bi bi-search me-2"></i>Tìm kiếm manga</h1>
            
            <div class="card search-card">
                <div class="card-body">
                    <form asp-action="Search" method="get" id="searchForm" hx-get="@Url.Action("Search", "Manga")" hx-target="#main-content" hx-push-url="true">
                        <div class="row g-3">
                            <div class="col-md-12">
                                <div class="input-group mb-3">
                                    <span class="input-group-text bg-primary theme-text"><i class="bi bi-search"></i></span>
                                    <input type="text" name="title" value="@Model.SortOptions.Title" class="form-control form-control-lg" placeholder="Nhập tên manga cần tìm...">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="bi bi-search me-2"></i>Tìm kiếm
                                    </button>
                                </div>
                            </div>
                            
                            <div class="col-md-12">
                                <div class="accordion" id="searchFilters">
                                    <div class="accordion-item">
                                        <h2 class="accordion-header" id="headingFilters">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFilters" aria-expanded="false" aria-controls="collapseFilters">
                                                <i class="bi bi-funnel me-2"></i>Bộ lọc nâng cao
                                            </button>
                                        </h2>
                                        <div id="collapseFilters" class="accordion-collapse collapse" aria-labelledby="headingFilters" data-bs-parent="#searchFilters">
                                            <div class="accordion-body">
                                                <div class="row g-3">
                                                    <!-- Tác giả / Họa sĩ -->
                                                    <div class="col-md-6">
                                                        <label class="form-label">Tác giả / Họa sĩ</label>
                                                        <input type="text" name="authorOrArtist" class="form-control" placeholder="Nhập tên tác giả hoặc họa sĩ..." value="@Model.SortOptions.AuthorOrArtist">
                                                    </div>
                                                    
                                                    <!-- Năm phát hành -->
                                                    <div class="col-md-6">
                                                        <label class="form-label">Năm phát hành</label>
                                                        <input type="number" name="year" class="form-control" placeholder="Nhập năm..." min="1900" max="@DateTime.Now.Year" value="@Model.SortOptions.Year">
                                                    </div>
                                                    
                                                    <!-- Trạng thái -->
                                                    <div class="col-md-6">
                                                        <label class="form-label">Trạng thái</label>
                                                        <div class="d-flex flex-wrap gap-2">
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="status" id="statusAll" value="" @(string.IsNullOrEmpty(Model.SortOptions.Status) ? "checked" : "")>
                                                                <label class="form-check-label" for="statusAll">Tất cả</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="status" id="statusOngoing" value="ongoing" @(Model.SortOptions.Status == "ongoing" ? "checked" : "")>
                                                                <label class="form-check-label" for="statusOngoing">Đang tiến hành</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="status" id="statusCompleted" value="completed" @(Model.SortOptions.Status == "completed" ? "checked" : "")>
                                                                <label class="form-check-label" for="statusCompleted">Hoàn thành</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="status" id="statusHiatus" value="hiatus" @(Model.SortOptions.Status == "hiatus" ? "checked" : "")>
                                                                <label class="form-check-label" for="statusHiatus">Tạm ngưng</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="status" id="statusCancelled" value="cancelled" @(Model.SortOptions.Status == "cancelled" ? "checked" : "")>
                                                                <label class="form-check-label" for="statusCancelled">Đã hủy</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                    <!-- Ngôn ngữ có sẵn -->
                                                    <div class="col-md-6">
                                                        <label class="form-label">Ngôn ngữ</label>
                                                        <div class="d-flex flex-wrap gap-2">
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="checkbox" name="availableTranslatedLanguage" id="langVi" value="vi" @(Model.SortOptions.Languages != null && Model.SortOptions.Languages.Contains("vi") ? "checked" : "")>
                                                                <label class="form-check-label" for="langVi">Tiếng Việt</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="checkbox" name="availableTranslatedLanguage" id="langEn" value="en" @(Model.SortOptions.Languages != null && Model.SortOptions.Languages.Contains("en") ? "checked" : "")>
                                                                <label class="form-check-label" for="langEn">Tiếng Anh</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="checkbox" name="availableTranslatedLanguage" id="langJp" value="ja" @(Model.SortOptions.Languages != null && Model.SortOptions.Languages.Contains("ja") ? "checked" : "")>
                                                                <label class="form-check-label" for="langJp">Tiếng Nhật</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="checkbox" name="availableTranslatedLanguage" id="langKo" value="ko" @(Model.SortOptions.Languages != null && Model.SortOptions.Languages.Contains("ko") ? "checked" : "")>
                                                                <label class="form-check-label" for="langKo">Tiếng Hàn</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="checkbox" name="availableTranslatedLanguage" id="langZh" value="zh" @(Model.SortOptions.Languages != null && Model.SortOptions.Languages.Contains("zh") ? "checked" : "")>
                                                                <label class="form-check-label" for="langZh">Tiếng Trung</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                    <!-- Đối tượng độc giả -->
                                                    <div class="col-md-6">
                                                        <label class="form-label">Đối tượng độc giả</label>
                                                        <div class="d-flex flex-wrap gap-2">
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="publicationDemographic" id="demoAll" value="" @(string.IsNullOrEmpty(Model.SortOptions.Demographic) || Model.SortOptions.Demographic == "Tất cả" ? "checked" : "")>
                                                                <label class="form-check-label" for="demoAll">Tất cả</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="publicationDemographic" id="demoShounen" value="shounen" @(Model.SortOptions.Demographic == "shounen" ? "checked" : "")>
                                                                <label class="form-check-label" for="demoShounen">Shounen</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="publicationDemographic" id="demoShoujo" value="shoujo" @(Model.SortOptions.Demographic == "shoujo" ? "checked" : "")>
                                                                <label class="form-check-label" for="demoShoujo">Shoujo</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="publicationDemographic" id="demoSeinen" value="seinen" @(Model.SortOptions.Demographic == "seinen" ? "checked" : "")>
                                                                <label class="form-check-label" for="demoSeinen">Seinen</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="radio" name="publicationDemographic" id="demoJosei" value="josei" @(Model.SortOptions.Demographic == "josei" ? "checked" : "")>
                                                                <label class="form-check-label" for="demoJosei">Josei</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                    <!-- Đánh giá nội dung -->
                                                    <div class="col-md-6">
                                                        <label class="form-label">Mức độ nội dung</label>
                                                        <div class="d-flex flex-wrap gap-2">
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="checkbox" name="contentRating" id="contentSafe" value="safe" checked>
                                                                <label class="form-check-label" for="contentSafe">An toàn</label>
                                                            </div>
                                                            <div class="form-check form-check-inline">
                                                                <input class="form-check-input" type="checkbox" name="contentRating" id="contentSuggestive" value="suggestive" checked>
                                                                <label class="form-check-label" for="contentSuggestive">Gợi ý</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                    <!-- Sắp xếp theo -->
                                                    <div class="col-md-6">
                                                        <label class="form-label">Sắp xếp theo</label>
                                                        <select class="form-select" name="sortBy">
                                                            @if (Model.SortOptions.SortBy == "latest")
                                                            {
                                                                <option value="latest" selected="selected">Mới nhất</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="latest">Mới nhất</option>
                                                            }
                                                            
                                                            @if (Model.SortOptions.SortBy == "title")
                                                            {
                                                                <option value="title" selected="selected">Tên (A-Z)</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="title">Tên (A-Z)</option>
                                                            }
                                                            
                                                            @if (Model.SortOptions.SortBy == "popular")
                                                            {
                                                                <option value="popular" selected="selected">Phổ biến</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="popular">Phổ biến</option>
                                                            }
                                                            
                                                            @if (Model.SortOptions.SortBy == "relevance")
                                                            {
                                                                <option value="relevance" selected="selected">Liên quan</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="relevance">Liên quan</option>
                                                            }
                                                            
                                                            @if (Model.SortOptions.SortBy == "rating")
                                                            {
                                                                <option value="rating" selected="selected">Đánh giá</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="rating">Đánh giá</option>
                                                            }
                                                            
                                                            @if (Model.SortOptions.SortBy == "createdAt")
                                                            {
                                                                <option value="createdAt" selected="selected">Thời gian tạo</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="createdAt">Thời gian tạo</option>
                                                            }
                                                            
                                                            @if (Model.SortOptions.SortBy == "year")
                                                            {
                                                                <option value="year" selected="selected">Năm xuất bản</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="year">Năm xuất bản</option>
                                                            }
                                                        </select>
                                                    </div>
                                                    
                                                    <!-- Hiển thị thẻ đã chọn -->
                                                    <div class="col-12" id="selectedTagsGroup" style="display: none;">
                                                        <label class="form-label">Thẻ đã chọn (<span id="tagsCount">0</span>)</label>
                                                        <div id="selectedTagsBadges" class="d-flex flex-wrap gap-1 mb-2"></div>
                                                    </div>
                                                    
                                                    <!-- Hộp tùy chọn thẻ mode -->
                                                    <div class="col-12" id="tagsConfigGroup">
                                                        <div class="d-flex align-items-center justify-content-between mb-2">
                                                            <label class="form-label mb-0">Chế độ thẻ</label>
                                                            <div class="form-check form-switch">
                                                                <input class="form-check-input" type="checkbox" id="includedTagsModeToggle" @(Model.SortOptions.IncludedTagsMode == "OR" ? "checked" : "")>
                                                                <label class="form-check-label" for="includedTagsModeToggle">
                                                                    <span id="includedTagsModeLabel">@(Model.SortOptions.IncludedTagsMode == "OR" ? "HOẶC" : "VÀ")</span>
                                                                </label>
                                                            </div>
                                                            <input type="hidden" name="includedTagsMode" id="includedTagsMode" value="@Model.SortOptions.IncludedTagsMode">
                                                        </div>
                                                        <small class="text-muted">
                                                            <strong>VÀ</strong>: Manga phải chứa tất cả thẻ đã chọn.
                                                            <strong>HOẶC</strong>: Manga chỉ cần chứa ít nhất một trong các thẻ đã chọn.
                                                        </small>
                                                    </div>
                                                    
                                                    <!-- Danh sách thẻ từ MangaDex -->
                                                    <div class="col-md-12">
                                                        <div class="d-flex align-items-center">
                                                            <label class="form-label mb-0">Thẻ và thể loại</label>
                                                            <button type="button" class="btn btn-sm btn-link ms-auto p-0" 
                                                                    data-bs-toggle="collapse" 
                                                                    data-bs-target="#tagsList" 
                                                                    aria-expanded="false" 
                                                                    aria-controls="tagsList">
                                                                <i class="bi bi-plus-circle me-1"></i>Hiển thị
                                                            </button>
                                                        </div>
                                                        <div class="collapse mt-2" id="tagsList">
                                                            <div id="tagsContainer" class="border rounded p-3 mb-3">
                                                                <div class="text-center">
                                                                    <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                                                                    <span>Đang tải danh sách thẻ...</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <input type="hidden" id="selectedTags" name="includedTagsStr" value="@(string.Join(",", Model.SortOptions.IncludedTags ?? new List<string>()))" />
                                                    </div>
                                                    
                                                    <!-- Phân trang -->
                                                    <div class="col-md-6">
                                                        <label class="form-label">Số kết quả mỗi trang</label>
                                                        <select name="pageSize" class="form-select">
                                                            @if (Model.PageSize == 12)
                                                            {
                                                                <option value="12" selected="selected">12</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="12">12</option>
                                                            }
                                                            
                                                            @if (Model.PageSize == 24)
                                                            {
                                                                <option value="24" selected="selected">24</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="24">24</option>
                                                            }
                                                            
                                                            @if (Model.PageSize == 36)
                                                            {
                                                                <option value="36" selected="selected">36</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="36">36</option>
                                                            }
                                                            
                                                            @if (Model.PageSize == 48)
                                                            {
                                                                <option value="48" selected="selected">48</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="48">48</option>
                                                            }
                                                            
                                                            @if (Model.PageSize == 100)
                                                            {
                                                                <option value="100" selected="selected">100</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="100">100</option>
                                                            }
                                                        </select>
                                                    </div>
                                                    
                                                    <div class="col-md-12 text-end">
                                                        <button type="button" class="btn btn-outline-secondary me-2" id="resetFilters">
                                                            <i class="bi bi-x-circle me-2"></i>Xóa bộ lọc
                                                        </button>
                                                        <button type="submit" class="btn btn-primary">
                                                            <i class="bi bi-filter me-2"></i>Áp dụng bộ lọc
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <input type="hidden" name="page" value="1" />
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <div id="search-results">
        @if (ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>@ViewBag.ErrorMessage
            </div>
        }
        
        @if (!string.IsNullOrEmpty(Model.SortOptions.Title) || !string.IsNullOrEmpty(Model.SortOptions.Status) || (Model.SortOptions.Genres != null && Model.SortOptions.Genres.Any()) || (Model.SortOptions.IncludedTags != null && Model.SortOptions.IncludedTags.Any()))
        {
            <div class="d-flex align-items-center mb-4">
                <h5 class="mb-0 me-3">Kết quả tìm kiếm:</h5>
                <div class="d-flex flex-wrap gap-2">
                    @if (!string.IsNullOrEmpty(Model.SortOptions.Title))
                    {
                        <span class="badge bg-primary">Tên: @Model.SortOptions.Title</span>
                    }
                    @if (!string.IsNullOrEmpty(Model.SortOptions.Status))
                    {
                        <span class="badge bg-info">Trạng thái: @TranslateStatus(Model.SortOptions.Status)</span>
                    }
                    @if (Model.SortOptions.Genres != null)
                    {
                        foreach (var genre in Model.SortOptions.Genres)
                        {
                            <span class="badge bg-secondary">@genre</span>
                        }
                    }
                    @if (Model.SortOptions.IncludedTags != null)
                    {
                        foreach (var tag in Model.SortOptions.IncludedTags)
                        {
                            <span class="badge bg-secondary">Tag: @tag</span>
                        }
                    }
                </div>
            </div>
        }
        
        @if (Model.Mangas.Count == 0)
        {
            <div class="text-center py-5">
                <i class="bi bi-emoji-frown display-1 text-muted"></i>
                <h3 class="mt-3">Không tìm thấy manga</h3>
                <p class="text-muted">Không tìm thấy manga phù hợp với tiêu chí tìm kiếm của bạn.</p>
                <a asp-action="Search" class="btn btn-primary mt-2" 
                   hx-get="@Url.Action("Search", "Manga", new { page = 1, pageSize = Model.PageSize })" 
                   hx-target="#main-content" 
                   hx-push-url="true">
                    <i class="bi bi-arrow-counterclockwise me-2"></i>Xóa bộ lọc
                </a>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var manga in Model.Mangas)
                {
                    <div class="col-6 col-md-4 col-lg-3 mb-4">
                        <div class="card h-100">
                            <a asp-action="Details" asp-route-id="@manga.Id" 
                               hx-get="@Url.Action("Details", "Manga", new { id = manga.Id })" 
                               hx-target="#main-content" 
                               hx-push-url="true" 
                               class="card-manga-cover-link">
                                <img src="@manga.CoverUrl" class="card-manga-cover" alt="@manga.Title" loading="lazy">
                                @if (!string.IsNullOrEmpty(manga.Status))
                                {
                                    <span class="manga-status badge @(manga.Status == "ongoing" ? "bg-success" : "bg-secondary")">
                                        @TranslateStatus(manga.Status)
                                    </span>
                                }
                            </a>
                            <div class="card-body">
                                <h5 class="card-title text-truncate" title="@manga.Title">
                                    <a asp-action="Details" asp-route-id="@manga.Id" 
                                       hx-get="@Url.Action("Details", "Manga", new { id = manga.Id })" 
                                       hx-target="#main-content" 
                                       hx-push-url="true" 
                                       class="text-decoration-none text-dark">
                                        @manga.Title
                                    </a>
                                </h5>
                                @if (!string.IsNullOrEmpty(manga.Author))
                                {
                                    <p class="card-text small text-muted">
                                        <i class="bi bi-person"></i> @manga.Author
                                    </p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            @if (Math.Ceiling((double)Model.TotalCount / Model.PageSize) > 1)
            {
                <div class="d-flex justify-content-center mt-4">
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            <li class="page-item">
                                <a class="page-link" 
                                   hx-get="@Url.Action("Search", "Manga", new { 
                                       page = 1, 
                                       title = Model.SortOptions.Title, 
                                       status = Model.SortOptions.Status, 
                                       sortBy = Model.SortOptions.SortBy, 
                                       authorOrArtist = Model.SortOptions.AuthorOrArtist,
                                       year = Model.SortOptions.Year,
                                       publicationDemographic = Model.SortOptions.Demographic,
                                       includedTagsMode = Model.SortOptions.IncludedTagsMode,
                                       pageSize = Model.PageSize,
                                       includedTagsStr = string.Join(",", Model.SortOptions.IncludedTags ?? new List<string>()) 
                                   })" 
                                   hx-target="#main-content" 
                                   hx-push-url="true" 
                                   aria-label="First">
                                    <i class="bi bi-chevron-double-left"></i>
                                </a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" 
                                   hx-get="@Url.Action("Search", "Manga", new { 
                                       page = Model.CurrentPage - 1, 
                                       title = Model.SortOptions.Title, 
                                       status = Model.SortOptions.Status, 
                                       sortBy = Model.SortOptions.SortBy, 
                                       authorOrArtist = Model.SortOptions.AuthorOrArtist,
                                       year = Model.SortOptions.Year,
                                       publicationDemographic = Model.SortOptions.Demographic,
                                       includedTagsMode = Model.SortOptions.IncludedTagsMode,
                                       pageSize = Model.PageSize,
                                       includedTagsStr = string.Join(",", Model.SortOptions.IncludedTags ?? new List<string>()) 
                                   })" 
                                   hx-target="#main-content" 
                                   hx-push-url="true" 
                                   aria-label="Previous">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </li>
                            
                            @{
                                var totalPages = (int)Math.Ceiling((double)Model.TotalCount / Model.PageSize);
                                var startPage = Math.Max(1, Model.CurrentPage - 2);
                                var endPage = Math.Min(startPage + 4, totalPages);
                                
                                if (endPage - startPage < 4 && startPage > 1)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }
                            
                            @for (var i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" 
                                       hx-get="@Url.Action("Search", "Manga", new { 
                                           page = i, 
                                           title = Model.SortOptions.Title, 
                                           status = Model.SortOptions.Status, 
                                           sortBy = Model.SortOptions.SortBy, 
                                           authorOrArtist = Model.SortOptions.AuthorOrArtist,
                                           year = Model.SortOptions.Year,
                                           publicationDemographic = Model.SortOptions.Demographic,
                                           includedTagsMode = Model.SortOptions.IncludedTagsMode,
                                           pageSize = Model.PageSize,
                                           includedTagsStr = string.Join(",", Model.SortOptions.IncludedTags ?? new List<string>()) 
                                       })" 
                                       hx-target="#main-content" 
                                       hx-push-url="true">
                                        @i
                                    </a>
                                </li>
                            }
                            
                            @if (Model.CurrentPage < totalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" 
                                       hx-get="@Url.Action("Search", "Manga", new { 
                                           page = Model.CurrentPage + 1, 
                                           title = Model.SortOptions.Title, 
                                           status = Model.SortOptions.Status, 
                                           sortBy = Model.SortOptions.SortBy, 
                                           authorOrArtist = Model.SortOptions.AuthorOrArtist,
                                           year = Model.SortOptions.Year,
                                           publicationDemographic = Model.SortOptions.Demographic,
                                           includedTagsMode = Model.SortOptions.IncludedTagsMode,
                                           pageSize = Model.PageSize,
                                           includedTagsStr = string.Join(",", Model.SortOptions.IncludedTags ?? new List<string>()) 
                                       })" 
                                       hx-target="#main-content" 
                                       hx-push-url="true" 
                                       aria-label="Next">
                                        <i class="bi bi-chevron-right"></i>
                                    </a>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" 
                                       hx-get="@Url.Action("Search", "Manga", new { 
                                           page = totalPages, 
                                           title = Model.SortOptions.Title, 
                                           status = Model.SortOptions.Status, 
                                           sortBy = Model.SortOptions.SortBy, 
                                           authorOrArtist = Model.SortOptions.AuthorOrArtist,
                                           year = Model.SortOptions.Year,
                                           publicationDemographic = Model.SortOptions.Demographic,
                                           includedTagsMode = Model.SortOptions.IncludedTagsMode,
                                           pageSize = Model.PageSize,
                                           includedTagsStr = string.Join(",", Model.SortOptions.IncludedTags ?? new List<string>()) 
                                       })" 
                                       hx-target="#main-content" 
                                       hx-push-url="true" 
                                       aria-label="Last">
                                        <i class="bi bi-chevron-double-right"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
                
                <div class="text-center mt-2 text-muted">
                    <small>Hiển thị @((Model.CurrentPage - 1) * Model.PageSize + 1) - @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount) trong tổng số @Model.TotalCount manga</small>
                </div>
            }
        }
    </div>
</div>

@section Styles {
    <style>
        /* Search card */
        .search-card {
            border-radius: 0.5rem;
            box-shadow: var(--card-shadow);
            border: none;
            margin-bottom: 2rem;
        }
        
        /* Manga Cards */
        .manga-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border-radius: 0.5rem;
            overflow: hidden;
        }
        
        .manga-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--hover-shadow);
        }
        
        /* Manga tag status */
        .manga-status {
            position: absolute;
            bottom: 10px;
            left: 10px;
            font-size: 0.75rem;
        }
        
        .manga-title {
            font-size: 1rem;
            height: 40px;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            margin-bottom: 0.5rem;
        }
        
        /* Tags styling */
        .tag-group h6 {
            margin-bottom: 0.5rem;
            color: var(--primary-color);
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.25rem;
        }
        
        .tag-list {
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }
        
        .tag-item {
            margin-right: 0 !important;
            background-color: rgba(var(--bs-primary-rgb), 0.05);
            border-radius: 0.25rem;
            padding: 0.25rem 0.5rem;
            transition: background-color 0.2s ease;
        }
        
        .tag-item:hover {
            background-color: rgba(var(--bs-primary-rgb), 0.1);
        }
        
        .tag-item .form-check-input {
            margin-top: 0.15rem;
        }
        
        .tag-remove {
            cursor: pointer;
            margin-left: 0.25rem;
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }
        
        .tag-remove:hover {
            opacity: 1;
        }
        
        /* CSS cho thẻ đã chọn */
        #selectedTagsBadges .badge {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 0.75rem;
            font-size: 0.85rem;
            font-weight: normal;
        }
        
        /* Fix for dark mode text color */
        [data-bs-theme="dark"] .manga-title a {
            color: var(--body-color) !important;
        }
        
        [data-bs-theme="dark"] .text-dark,
        [data-bs-theme="dark"] .text-decoration-none.text-dark,
        [data-bs-theme="dark"] .card-title a {
            color: var(--body-color) !important;
        }
        
        [data-bs-theme="dark"] .accordion-button {
            color: var(--body-color);
            background-color: var(--card-bg);
        }
        
        [data-bs-theme="dark"] .accordion-item {
            background-color: var(--card-bg);
            border-color: var(--border-color);
        }
        
        [data-bs-theme="dark"] .accordion-button:not(.collapsed) {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--primary-color);
        }
        
        [data-bs-theme="dark"] .accordion-button:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        
        [data-bs-theme="dark"] .accordion-button::after {
            filter: invert(1) grayscale(100%) brightness(200%);
        }
        
        /* Form controls trong chế độ tối */
        [data-bs-theme="dark"] .form-control {
            background-color: #2d2d2d;
            border-color: var(--border-color);
            color: var(--body-color);
        }
        
        [data-bs-theme="dark"] .form-control:focus {
            background-color: #363636;
            color: var(--body-color);
        }
        
        [data-bs-theme="dark"] .input-group-text {
            background-color: #363636;
            border-color: var(--border-color);
            color: var(--body-color);
        }
        
        /* Search input group */
        .input-group-text.bg-primary {
            background-color: var(--primary-color) !important;
        }
        
        /* Pagination */
        .pagination .page-link {
            border-radius: 0.25rem;
            margin: 0 2px;
            color: var(--primary-color);
        }
        
        .pagination .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }
        
        /* Form elements */
        .form-check-inline {
            margin-right: 0.75rem;
        }
        
        /* Badge adjustments for dark mode */
        [data-bs-theme="dark"] .badge.bg-primary {
            background-color: var(--primary-color) !important;
        }
        
        [data-bs-theme="dark"] .badge.bg-secondary {
            background-color: #505a68 !important;
        }
        
        [data-bs-theme="dark"] .badge.bg-info {
            background-color: #0a7f8f !important;
        }
        
        /* Form check trong chế độ tối */
        [data-bs-theme="dark"] .form-check-input {
            background-color: #363636;
            border-color: #666;
        }
        
        [data-bs-theme="dark"] .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        [data-bs-theme="dark"] .form-check-label {
            color: var(--body-color);
        }
        
        /* Form select trong chế độ tối */
        [data-bs-theme="dark"] .form-select {
            background-color: #2d2d2d;
            border-color: var(--border-color);
            color: var(--body-color);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23adb5bd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        }
        
        [data-bs-theme="dark"] .form-select:focus {
            background-color: #363636;
            color: var(--body-color);
            border-color: #86b7fe;
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        
        /* Cải thiện card body trong chế độ tối */
        [data-bs-theme="dark"] .card-body {
            background-color: var(--card-bg);
            color: var(--body-color);
        }
        
        /* Button outline trong chế độ tối */
        [data-bs-theme="dark"] .btn-outline-secondary {
            color: #ccc;
            border-color: #666;
        }
        
        [data-bs-theme="dark"] .btn-outline-secondary:hover {
            background-color: #444;
            color: #fff;
        }
        
        /* Reset filters button */
        [data-bs-theme="dark"] #resetFilters:hover {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
            border-color: #dc3545;
        }
        
        /* Tags trong chế độ tối */
        [data-bs-theme="dark"] .tag-item {
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        [data-bs-theme="dark"] .tag-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        [data-bs-theme="dark"] #tagsContainer {
            background-color: #222;
            border-color: #444 !important;
        }
        
        [data-bs-theme="dark"] .tag-group h6 {
            color: #fff;
            border-color: #444;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Xử lý nút reset bộ lọc
            $('#resetFilters').click(function() {
                // Reset form inputs
                $('input[name="title"]').val('');
                $('input[name="authorOrArtist"]').val('');
                $('input[name="year"]').val('');
                
                // Reset trạng thái
                $('input[name="status"]').prop('checked', false);
                $('#statusAll').prop('checked', true);
                
                // Reset ngôn ngữ
                $('input[name="availableTranslatedLanguage"]').prop('checked', false);
                $('#langVi').prop('checked', true);
                
                // Reset đối tượng độc giả
                $('input[name="publicationDemographic"]').prop('checked', false);
                $('#demoAll').prop('checked', true);
                
                // Reset mức độ nội dung
                $('input[name="contentRating"]').prop('checked', true);
                
                // Reset thẻ
                $('input[name="includedTags[]"]').prop('checked', false);
                $('#selectedTags').val('');
                $('#selectedTagsBadges').empty();
                $('#selectedTagsGroup').hide();
                $('#tagsCount').text('0');
                
                // Reset includedTagsMode
                $('#includedTagsModeToggle').prop('checked', false);
                $('#includedTagsMode').val('AND');
                $('#includedTagsModeLabel').text('VÀ');
                
                // Reset genres cũ (nếu còn)
                $('input[name="genres"]').prop('checked', false);
                
                // Reset sortBy
                $('select[name="sortBy"]').val('latest');
                
                // Reset pageSize
                $('select[name="pageSize"]').val('24');
                
                // Reset page
                $('input[name="page"]').val('1');
                
                // Submit form
                $('#searchForm').submit();
            });
            
            // Xử lý form submit để cập nhật giá trị hidden field
            $('#searchForm').on('submit', function() {
                // Cập nhật giá trị cho includedTagsStr từ các checkbox đã chọn
                const selectedTags = [];
                $('input[name="includedTags[]"]:checked').each(function() {
                    selectedTags.push($(this).val());
                });
                
                $('#selectedTags').val(selectedTags.join(','));
                return true; // Cho phép form submit
            });
            
            // Xử lý includedTagsMode toggle
            $('#includedTagsModeToggle').on('change', function() {
                if ($(this).is(':checked')) {
                    $('#includedTagsMode').val('OR');
                    $('#includedTagsModeLabel').text('HOẶC');
                } else {
                    $('#includedTagsMode').val('AND');
                    $('#includedTagsModeLabel').text('VÀ');
                }
            });
            
            // Mở rộng collapse Tags nếu có tags đã được chọn
            if ($('#selectedTags').val()) {
                setTimeout(function() {
                    $('#tagsList').collapse('show');
                }, 500);
            }
            
            // Kiểm tra số lượng thẻ đã chọn và cập nhật hiển thị
            function updateTagsCount() {
                const count = $('input[name="includedTags[]"]:checked').length;
                $('#tagsCount').text(count);
                $('#selectedTagsGroup').toggle(count > 0);
            }
            
            // Chọn tất cả các ngôn ngữ
            $('#selectAllLanguages').on('click', function(e) {
                e.preventDefault();
                $('input[name="availableTranslatedLanguage"]').prop('checked', true);
            });
            
            // Bỏ chọn tất cả các ngôn ngữ
            $('#deselectAllLanguages').on('click', function(e) {
                e.preventDefault();
                $('input[name="availableTranslatedLanguage"]').prop('checked', false);
            });
            
            // Kiểm tra và cập nhật hiển thị ban đầu
            updateTagsCount();
            
            // Khi thay đổi các checkbox thẻ
            $(document).on('change', 'input[name="includedTags[]"]', function() {
                updateTagsCount();
            });
            
            // Xử lý tải danh sách thẻ từ API
            $('#tagsList').on('show.bs.collapse', function() {
                loadTags();
            });
            
            // Hàm tải danh sách thẻ từ API
            function loadTags() {
                // Kiểm tra xem tags đã được tải hay chưa
                if ($('#tagsContainer').find('.tag-group').length > 0) {
                    return; // Đã tải rồi, không tải lại
                }
                
                // Lấy danh sách các thẻ đã chọn
                const selectedTagIds = ($('#selectedTags').val() || '').split(',').filter(id => id.trim() !== '');
                
                $.ajax({
                    url: '/api/manga/tags',
                    method: 'GET',
                    success: function(response) {
                        const tagsContainer = $('#tagsContainer');
                        tagsContainer.empty();
                        
                        if (!response || !response.data || response.data.length === 0) {
                            tagsContainer.html('<div class="alert alert-info">Không thể tải danh sách thẻ. Vui lòng thử lại sau.</div>');
                            return;
                        }
                        
                        // Nhóm thẻ theo group
                        const tagGroups = {};
                        
                        response.data.forEach(tag => {
                            if (!tag.attributes || !tag.attributes.name || !tag.attributes.group) return;
                            
                            const group = tag.attributes.group;
                            if (!tagGroups[group]) {
                                tagGroups[group] = [];
                            }
                            
                            tagGroups[group].push({
                                id: tag.id,
                                name: tag.attributes.name.vi || tag.attributes.name.en || Object.values(tag.attributes.name)[0],
                                description: tag.attributes.description?.vi || tag.attributes.description?.en || ''
                            });
                        });
                        
                        // Sắp xếp các nhóm thẻ theo thứ tự cố định
                        const groupOrder = [
                            'format', 'genre', 'theme', 'content', 'demographic'
                        ];
                        
                        // Ánh xạ tên nhóm sang tiếng Việt
                        const groupNames = {
                            'format': 'Định dạng',
                            'genre': 'Thể loại',
                            'theme': 'Chủ đề',
                            'content': 'Nội dung',
                            'demographic': 'Đối tượng'
                        };
                        
                        // Hiển thị các nhóm thẻ theo thứ tự
                        groupOrder.forEach(group => {
                            if (!tagGroups[group]) return;
                            
                            const tags = tagGroups[group];
                            
                            // Sắp xếp các thẻ theo tên
                            tags.sort((a, b) => a.name.localeCompare(b.name));
                            
                            const groupDiv = $('<div class="tag-group mb-4"></div>');
                            groupDiv.append(`<h6 class="border-bottom pb-2 mb-3">${groupNames[group] || group}</h6>`);
                            
                            const tagsDiv = $('<div class="d-flex flex-wrap gap-2"></div>');
                            
                            tags.forEach(tag => {
                                const isChecked = selectedTagIds.includes(tag.id);
                                const checkboxId = `tag-${tag.id}`;
                                
                                const tagDiv = $(`
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="includedTags[]" id="${checkboxId}" value="${tag.id}" ${isChecked ? 'checked' : ''}>
                                        <label class="form-check-label" for="${checkboxId}" title="${tag.description || ''}">${tag.name}</label>
                                    </div>
                                `);
                                
                                tagsDiv.append(tagDiv);
                                
                                // Cập nhật hiển thị thẻ đã chọn
                                if (isChecked) {
                                    updateSelectedTagBadges(tag.id, tag.name);
                                }
                            });
                            
                            groupDiv.append(tagsDiv);
                            tagsContainer.append(groupDiv);
                        });
                        
                        // Cập nhật số lượng thẻ đã chọn
                        updateTagsCount();
                    },
                    error: function(xhr, status, error) {
                        console.error('Lỗi khi tải tags:', error);
                        $('#tagsContainer').html(`
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>Không thể tải danh sách thẻ. Vui lòng thử lại sau.
                            </div>
                        `);
                    }
                });
            }
            
            // Cập nhật hiển thị thẻ đã chọn
            function updateSelectedTagBadges(tagId, tagName) {
                const badgesContainer = $('#selectedTagsBadges');
                const badgeId = `badge-${tagId}`;
                
                // Kiểm tra xem badge đã tồn tại chưa
                if ($(`#${badgeId}`).length === 0) {
                    const badge = $(`
                        <span id="${badgeId}" class="badge bg-primary me-1 mb-1" data-tag-id="${tagId}">
                            ${tagName}
                            <button type="button" class="btn-close btn-close-white ms-1" aria-label="Xóa"></button>
                        </span>
                    `);
                    
                    badge.find('.btn-close').on('click', function() {
                        $(`#tag-${tagId}`).prop('checked', false).trigger('change');
                        badge.remove();
                        updateTagsCount();
                    });
                    
                    badgesContainer.append(badge);
                }
            }
            
            // Sự kiện khi chọn/bỏ chọn thẻ
            $(document).on('change', 'input[name="includedTags[]"]', function() {
                const tagId = $(this).val();
                const tagName = $(this).next('label').text();
                
                if ($(this).is(':checked')) {
                    updateSelectedTagBadges(tagId, tagName);
                } else {
                    $(`#badge-${tagId}`).remove();
                }
                
                updateTagsCount();
            });
            
            // Mở rộng tag list nếu đã có tags được chọn
            if ($('#selectedTags').val()) {
                setTimeout(function() {
                    $('#tagsList').collapse('show');
                }, 500);
            }
        });
    </script>
}

@functions {
    public string TranslateStatus(string status)
    {
        return status switch
        {
            "ongoing" => "Đang tiến hành",
            "completed" => "Hoàn thành",
            "hiatus" => "Tạm ngưng",
            "cancelled" => "Đã hủy",
            _ => "Không rõ"
        };
    }
} 